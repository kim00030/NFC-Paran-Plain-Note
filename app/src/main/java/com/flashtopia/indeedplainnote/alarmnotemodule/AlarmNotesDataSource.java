/*
* This is class that manages Database designed to store alarm notes
* in order to persist them even if device reboot.
*
* */

package com.flashtopia.indeedplainnote.alarmnotemodule;


import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import java.util.ArrayList;
import java.util.List;

public class AlarmNotesDataSource {

    private SQLiteOpenHelper alarmNotesDbOpenHelper;
    private SQLiteDatabase alarmNotesDb;

    private static AlarmNotesDataSource instance;

    public static AlarmNotesDataSource getInstance() {

        if (instance == null) {

            instance = new AlarmNotesDataSource();
        }
        return instance;
    }

    public void init(Context context) {
        alarmNotesDbOpenHelper = new AlarmNoteDBOpenHelper(context);
    }

    public SQLiteDatabase getAlarmNotesDb(){
        return alarmNotesDb;
    }
    public void open() {

        alarmNotesDb = alarmNotesDbOpenHelper.getWritableDatabase();
    }

    public void close() {

        alarmNotesDbOpenHelper.close();
    }

    //method to find any alarm notes in AlarmNote DB
    public List<AlarmNote> findAll() {

        List<AlarmNote> alarmNotesList = new ArrayList<>();

        open();

        Cursor cursor = alarmNotesDb.query(AlarmNoteDBOpenHelper.TABLE_ALARM_NOTES,
                AlarmNoteDBOpenHelper.ALL_COLUMNS, null, null, null, null, null);

        if (cursor.getCount() > 0) {

            while (cursor.moveToNext()) {
                //automatic column id generated by db
                //int columnId = cursor.getInt(cursor.getColumnIndex(AlarmNoteDBOpenHelper.COLUMN_ID));
                //id of note that set to run alarm
                int noteId = cursor.getInt(cursor.getColumnIndex(AlarmNoteDBOpenHelper.NOTE_ID));
                long timeInMills = cursor.getLong(cursor.getColumnIndex(AlarmNoteDBOpenHelper.COLUMN_TIME_SET));
                int alertRequestCode = cursor.getInt(cursor.getColumnIndex(AlarmNoteDBOpenHelper.COLUMN_ALERT_REQUEST_CODE));
                String notableText = cursor.getString(cursor.getColumnIndex(AlarmNoteDBOpenHelper.COLUMN_NOTE));

                AlarmNote alarmNote = new AlarmNote();
                //alarmNote.setColumnId(columnId);
                alarmNote.setNoteId(noteId);
                alarmNote.setTimeInMills(timeInMills);
                alarmNote.setNotableText(notableText);
                alarmNote.setAlertRequestCode(alertRequestCode);
                alarmNotesList.add(alarmNote);
            }
            cursor.close();
        }

        return alarmNotesList;

    }

    /*Method to insert alarm note to DB*/
    public void insert(AlarmNote alarmNote) {

        open();
        ContentValues values = new ContentValues();
        values.put(AlarmNoteDBOpenHelper.NOTE_ID, alarmNote.getNoteId());
        values.put(AlarmNoteDBOpenHelper.COLUMN_TIME_SET, alarmNote.getTimeInMills());
        values.put(AlarmNoteDBOpenHelper.COLUMN_ALERT_REQUEST_CODE, alarmNote.getAlertRequestCode());
        values.put(AlarmNoteDBOpenHelper.COLUMN_NOTE, alarmNote.getNotableText());


        try {
            alarmNotesDb.insert(AlarmNoteDBOpenHelper.TABLE_ALARM_NOTES, null, values);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /*method to delete alarm note in DB by alert request code that is unique*/
    public boolean delete(int alertRequestCode) {

        try {
            open();
            String where = AlarmNoteDBOpenHelper.COLUMN_ALERT_REQUEST_CODE + "=" + alertRequestCode;
            int result = alarmNotesDb.delete(AlarmNoteDBOpenHelper.TABLE_ALARM_NOTES, where, null);

            return (result == 1);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
}
